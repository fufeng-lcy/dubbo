第一步: 构建源码调试环境
    dubbo源码官方地址: https://github.com/apache/dubbo
        1、fork 官方dubbo仓库到自己的仓库
        2、git clone git@github.com:[自己仓库名称]/dubbo.git
        3、到当前clone的目录(含有pom.xml)中，执行mvn clean install -Dmaven.test.skip=true
        4、将项目转换成idea项目 mvn idea:idea(如果需要失败可以利用 mvn idea:workspace)
        5、切换分支到目前主流分支
            git fetch   拉去所有相关的远程仓储到本地仓储
            git checkout -b 2.7.8-release  切换到release分支
第二步: 项目结构概览
    dubbo-common :  Dubbo 的一个公共模块，其中有很多工具类以及公共逻辑，例如 Dubbo SPI 实现、时间轮实现、动态编译器等。
        org.apache.dubbo.common.compiler : 动态编译相关
        org.apache.dubbo.common.config : 配置相关
        org.apache.dubbo.common.constants : 通用常量定义(如url参数的key)
        org.apache.dubbo.common.convert : 类型转换器
        org.apache.dubbo.common.extension : SPI 核心实现
        org.apache.dubbo.common.io : IO相关实现类
        org.apache.dubbo.common.logger : 多种java日志集成
        org.apache.dubbo.common.threadlocal : ThreadLocal相关工具类
        org.apache.dubbo.common.threadpool : 线程池相关工具类
        org.apache.dubbo.common.timer : 时间轮训器工具
        org.apache.dubbo.common.utils : 通用工具类
    dubbo-remoting : Dubbo 的远程通信模块，其中的子模块依赖各种开源组件实现远程通信。
        在 dubbo-remoting-api 子模块中定义该模块的抽象概念，在其他子模块中依赖其他开源组件进行实现，
        例如:
            dubbo-remoting-netty4 子模块依赖 Netty 4 实现远程通信，
            dubbo-remoting-etcd3 子模块依赖 etcd 3 实现远程通信，
            dubbo-remoting-p2p 子模块依赖 p2p 实现远程通信，
            dubbo-remoting-redis 子模块依赖 redis 实现远程通信，
            dubbo-remoting-zookeeper 通过 Apache Curator 实现与 ZooKeeper 集群的交互。
    dubbo-rpc : Dubbo 中对远程调用协议进行抽象的模块，其中抽象了各种协议，依赖于 dubbo-remoting 模块的远程调用功能。
        dubbo-rpc-api 子模块是核心抽象，其他子模块是针对具体协议的实现。
        例如:
            dubbo-rpc-dubbo 子模块是对 Dubbo 协议的实现，依赖了 dubbo-remoting-netty4 等 dubbo-remoting 子模块。
            dubbo-rpc 模块的实现中只包含一对一的调用，不关心集群的相关内容。
    dubbo-cluster :  Dubbo 中负责管理集群的模块，提供了负载均衡、容错、路由等一系列集群相关的功能，
        最终的目的是将多个 Provider 伪装为一个 Provider，这样 Consumer 就可以像调用一个 Provider 那样调用 Provider 集群了。
    dubbo-registry : Dubbo 中负责与多种开源注册中心进行交互的模块，提供注册中心的能力。
        其中， dubbo-registry-api 子模块是顶层抽象，其他子模块是针对具体开源注册中心组件的具体实现，
        例如，dubbo-registry-zookeeper 子模块是 Dubbo 接入 ZooKeeper 的具体实现。
    dubbo-monitor : Dubbo 的监控模块，主要用于统计服务调用次数、调用时间以及实现调用链跟踪的服务。
    dubbo-config :  Dubbo 对外暴露的配置都是由该模块进行解析的。
        例如:
        dubbo-config-api 子模块负责处理 API 方式使用时的相关配置
        dubbo-config-spring 子模块负责处理与 Spring 集成使用时的相关配置方式。
        有了 dubbo-config 模块，用户只需要了解 Dubbo 配置的规则即可，无须了解 Dubbo 内部的细节。
    dubbo-metadata : Dubbo 的元数据模块。
        dubbo-metadata 模块的实现套路也是有一个 api 子模块进行抽象，然后其他子模块进行具体实现。
    dubbo-configcenter : Dubbo 的动态配置模块，主要负责外部化配置以及服务治理规则的存储与通知，提供了多个子模块用来接入多种开源的服务发现组件。

